{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react/weather_app/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react'; // axiosで通信を行う\n\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\"; // API通信Getのやり方（axiosを使用）\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => {\n    _s();\n\n    console.log(data);\n    setCity('gunma'); // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n\n    React.useEffect(() => {\n      // axios.get(URL)でapiからgetしてjsonを取得\n      const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n      const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n      axios.get(topUrl + city + bottomUrl) // thenで成功した場合の処理をかける\n      .then(response => {\n        console.log(response);\n        console.log(response.data.weather[0].main);\n        setName(response.data.name);\n        setWeather(response.data.weather[0].main); // catchでエラー時の挙動を定義する\n      }).catch(err => {\n        console.log('err:', err);\n      }); // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n    }, []);\n  }; // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n\n\n  _s(onSubmit, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  React.useEffect(() => {\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl) // thenで成功した場合の処理をかける\n    .then(response => {\n      console.log(response);\n      console.log(response.data.weather[0].main);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main); // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    }); // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"exampleRequired\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this), errors.exampleRequired && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"aaa:\", city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"City:\", statusName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Weather:\", statusWeather]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s2(App, \"rkfd6UWUmc8VFgEu3ZemwgdCy/Q=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/react/weather_app/src/App.js"],"names":["React","axios","useForm","App","statusName","setName","useState","statusWeather","setWeather","city","setCity","register","handleSubmit","formState","errors","onSubmit","data","console","log","useEffect","topUrl","bottomUrl","get","then","response","weather","main","name","catch","err","required","exampleRequired"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n// axiosで通信を行う\nimport axios from 'axios';\n\nimport { useForm } from \"react-hook-form\";\n\n\n\n// API通信Getのやり方（axiosを使用）\nfunction App() {\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n\n\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const onSubmit = data => {\n    console.log(data);\n    setCity('gunma');\n      // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n      React.useEffect(() => {\n\n          // axios.get(URL)でapiからgetしてjsonを取得\n          const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n          const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n          axios.get(topUrl + city + bottomUrl)\n          // thenで成功した場合の処理をかける\n          .then(response => {\n            console.log(response);\n            console.log(response.data.weather[0].main);\n            setName(response.data.name);\n            setWeather(response.data.weather[0].main);\n        \n            // catchでエラー時の挙動を定義する\n          }).catch(err => {\n            console.log('err:', err);\n          });\n        // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n      }, []);\n  }\n\n\n\n\n\n\n\n  // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  React.useEffect(() => {\n\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl)\n    // thenで成功した場合の処理をかける\n    .then(response => {\n      console.log(response);\n      console.log(response.data.weather[0].main);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main);\n  \n      // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n  // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n}, []);\n  \n  return (\n    <>\n    <div className=\"App\">\n      <br></br>\n      <br></br>\n\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n      {/* include validation with required or other standard HTML validation rules */}\n      <input {...register(\"exampleRequired\", { required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.exampleRequired && <span>This field is required</span>}\n      <input type=\"submit\" />\n      <h1>aaa:{city}</h1>\n    </form>\n\n\n      <h1>City:{statusName}</h1>\n      <h1>Weather:{statusWeather}</h1>\n    </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}