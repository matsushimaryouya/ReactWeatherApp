{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react/weather_app/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react'; // axiosで通信を行う\n\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GetForm(props) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n  props.onSubmit(city => 'gunma');\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"exampleRequired\", {\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), errors.exampleRequired && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"This field is required\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n} // API通信Getのやり方（axiosを使用）\n\n\n_s(GetForm, \"cSudtlZF25wA1QXS6hk7TRnoNuU=\", false, function () {\n  return [useForm];\n});\n\n_c = GetForm;\n\nfunction App() {\n  _s2();\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo'); // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n\n  React.useEffect(() => {\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl) // thenで成功した場合の処理をかける\n    .then(response => {\n      console.log(response);\n      console.log(response.data.weather[0].main);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main); // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    }); // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetForm, {\n        onSubmit: setCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"City:\", statusName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Weather:\", statusWeather]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s2(App, \"JCQ2xJ0DLNJ4NW5CunIZHFFGsRc=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetForm\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/react/weather_app/src/App.js"],"names":["React","axios","useForm","GetForm","props","register","handleSubmit","formState","errors","onSubmit","city","data","console","log","required","exampleRequired","App","statusName","setName","useState","statusWeather","setWeather","setCity","useEffect","topUrl","bottomUrl","get","then","response","weather","main","name","catch","err"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n// axiosで通信を行う\nimport axios from 'axios';\n\nimport { useForm } from \"react-hook-form\";\n\nfunction GetForm(props) {\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  props.onSubmit((city)=>'gunma');\n  const onSubmit = data => {\n    console.log(data);\n  }\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      \n      {/* include validation with required or other standard HTML validation rules */}\n      <input {...register(\"exampleRequired\", { required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.exampleRequired && <span>This field is required</span>}\n      <input type=\"submit\" />\n      <h1>{props.city}</h1>\n    </form>\n  );\n}\n\n\n// API通信Getのやり方（axiosを使用）\nfunction App() {\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n\n  // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  React.useEffect(() => {\n\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl)\n    // thenで成功した場合の処理をかける\n    .then(response => {\n      console.log(response);\n      console.log(response.data.weather[0].main);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main);\n  \n      // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n  // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n}, []);\n  \n  return (\n    <>\n    <div className=\"App\">\n      <br></br>\n      <br></br>\n      <GetForm onSubmit={setCity}/>\n      <h1>City:{statusName}</h1>\n      <h1>Weather:{statusWeather}</h1>\n    </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}