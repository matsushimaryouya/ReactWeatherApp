{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react/weather_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react'; // axiosで通信を行う\n\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\"; // API通信Getのやり方（axiosを使用）\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo'); // react-hook-form\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => {\n    setCity(data.exampleRequired);\n  }; // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  // React.useEffect(() => {\n  // axios.get(URL)でapiからgetしてjsonを取得\n\n\n  const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n  const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n  axios.get(topUrl + city + bottomUrl) // thenで成功した場合の処理をかける\n  .then(response => {\n    const temp = parseInt((response.data.main.temp - 273.15) * 10, 10) / 10;\n    console.log(response);\n    console.log(temp);\n    setName(response.data.name);\n    setWeather(response.data.weather[0].main); // catchでエラー時の挙動を定義する\n  }).catch(err => {\n    console.log('err:', err);\n  }); // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"exampleRequired\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), errors.exampleRequired && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"aaa:\", city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"City:\", statusName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Weather:\", statusWeather]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"MiQLd8Nu7oL8L/9hcR6tamQJbOc=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/react/weather_app/src/App.js"],"names":["React","axios","useForm","App","statusName","setName","useState","statusWeather","setWeather","city","setCity","register","handleSubmit","formState","errors","onSubmit","data","exampleRequired","topUrl","bottomUrl","get","then","response","temp","parseInt","main","console","log","name","weather","catch","err","required"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,iBAAxB,C,CAIA;;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,UAAD,EAAaC,OAAb,IAAwBL,KAAK,CAACM,QAAN,CAAe,SAAf,CAA9B;AACA,QAAM,CAACC,aAAD,EAAgBC,UAAhB,IAA8BR,KAAK,CAACM,QAAN,CAAe,SAAf,CAApC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACM,QAAN,CAAe,OAAf,CAAxB,CALa,CAOb;;AACA,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAArC,MAAoDZ,OAAO,EAAjE;;AACA,QAAMa,QAAQ,GAAGC,IAAI,IAAI;AACvBN,IAAAA,OAAO,CAACM,IAAI,CAACC,eAAN,CAAP;AACD,GAFD,CATa,CAcb;AACA;AAEE;;;AACA,QAAMC,MAAM,GAAG,oDAAf;AACA,QAAMC,SAAS,GAAG,4CAAlB;AACAlB,EAAAA,KAAK,CAACmB,GAAN,CAAUF,MAAM,GAAGT,IAAT,GAAgBU,SAA1B,EACA;AADA,GAECE,IAFD,CAEMC,QAAQ,IAAI;AAChB,UAAMC,IAAI,GAAGC,QAAQ,CAAC,CAACF,QAAQ,CAACN,IAAT,CAAcS,IAAd,CAAmBF,IAAnB,GAA0B,MAA3B,IAAqC,EAAtC,EAA0C,EAA1C,CAAR,GAAwD,EAArE;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAlB,IAAAA,OAAO,CAACiB,QAAQ,CAACN,IAAT,CAAcY,IAAf,CAAP;AACApB,IAAAA,UAAU,CAACc,QAAQ,CAACN,IAAT,CAAca,OAAd,CAAsB,CAAtB,EAAyBJ,IAA1B,CAAV,CALgB,CAOhB;AACD,GAVD,EAUGK,KAVH,CAUSC,GAAG,IAAI;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBI,GAApB;AACD,GAZD,EApBW,CAkCb;AACF;;AAIE,sBACE;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAM,QAAA,QAAQ,EAAEnB,YAAY,CAACG,QAAD,CAA5B;AAAA,gCAEE,sBAAWJ,QAAQ,CAAC,iBAAD,EAAoB;AAAEqB,YAAAA,QAAQ,EAAE;AAAZ,WAApB;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAFF,EAIGlB,MAAM,CAACG,eAAP,iBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJ7B,eAKE;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA,6BAASR,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAaE;AAAA,4BAAUL,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eAcE;AAAA,+BAAaG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAoBD;;GA3DQJ,G;UAQmDD,O;;;KARnDC,G;AA6DT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React from 'react';\n// axiosで通信を行う\nimport axios from 'axios';\n\nimport { useForm } from \"react-hook-form\";\n\n\n\n// API通信Getのやり方（axiosを使用）\nfunction App() {\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n\n  // react-hook-form\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const onSubmit = data => {\n    setCity(data.exampleRequired);\n  }\n\n\n  // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  // React.useEffect(() => {\n\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl)\n    // thenで成功した場合の処理をかける\n    .then(response => {\n      const temp = parseInt((response.data.main.temp - 273.15) * 10, 10) / 10;\n      console.log(response);\n      console.log(temp);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main);\n  \n      // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n\n  // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n// }, []);\n  \n\n\n  return (\n    <>\n    <div className=\"App\">\n      <br></br>\n      <br></br>\n\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {/* include validation with required or other standard HTML validation rules */}\n        <input {...register(\"exampleRequired\", { required: true })} />\n        {/* errors will return when field validation fails  */}\n        {errors.exampleRequired && <span>This field is required</span>}\n        <input type=\"submit\" />\n        <h1>aaa:{city}</h1>\n      </form>\n      <h1>City:{statusName}</h1>\n      <h1>Weather:{statusWeather}</h1>\n    </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}