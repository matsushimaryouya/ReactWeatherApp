{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react/weather_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react'; // axiosで通信を行う\n\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\"; // API通信Getのやり方（axiosを使用）\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n  const [temperature, setTemp] = React.useState();\n  const [maxTemperature, setMaxTemp] = React.useState();\n  const [minTemperature, setMinTemp] = React.useState(); // react-hook-form\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => {\n    setCity(data.exampleRequired);\n  }; // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  // React.useEffect(() => {\n  // axios.get(URL)でapiからgetしてjsonを取得\n\n\n  const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n  const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n  axios.get(topUrl + city + bottomUrl) // thenで成功した場合の処理をかける\n  .then(response => {\n    const temp = parseInt((response.data.main.temp - 273.15) * 10, 10) / 10;\n    const maxTemp = parseInt((response.data.main.temp_max - 273.15) * 10, 10) / 10;\n    const minTemp = parseInt((response.data.main.temp_min - 273.15) * 10, 10) / 10;\n    console.log(response);\n    console.log(temp);\n    console.log(maxTemp);\n    console.log(minTemp);\n    setName(response.data.name);\n    setWeather(response.data.weather[0].main);\n    setTemp(temp);\n    setTemp(maxTemp);\n    setTemp(minTemp); // catchでエラー時の挙動を定義する\n  }).catch(err => {\n    console.log('err:', err);\n  }); // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"exampleRequired\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), errors.exampleRequired && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"City:\", statusName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Weather:\", statusWeather]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"temperature:\", temperature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"temperature:\", maxTemperature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"temperature:\", minTemperature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"W3526Rz7vXO/3ohLTBjSlGowieY=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/react/weather_app/src/App.js"],"names":["React","axios","useForm","App","statusName","setName","useState","statusWeather","setWeather","city","setCity","temperature","setTemp","maxTemperature","setMaxTemp","minTemperature","setMinTemp","register","handleSubmit","formState","errors","onSubmit","data","exampleRequired","topUrl","bottomUrl","get","then","response","temp","parseInt","main","maxTemp","temp_max","minTemp","temp_min","console","log","name","weather","catch","err","required"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n// axiosで通信を行う\nimport axios from 'axios';\n\nimport { useForm } from \"react-hook-form\";\n\n\n\n// API通信Getのやり方（axiosを使用）\nfunction App() {\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n  const [temperature, setTemp] = React.useState();\n  const [maxTemperature, setMaxTemp] = React.useState();\n  const [minTemperature, setMinTemp] = React.useState();\n\n  // react-hook-form\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const onSubmit = data => {\n    setCity(data.exampleRequired);\n  }\n\n\n  // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  // React.useEffect(() => {\n\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl)\n    // thenで成功した場合の処理をかける\n    .then(response => {\n      const temp = parseInt((response.data.main.temp - 273.15) * 10, 10) / 10;\n      const maxTemp = parseInt((response.data.main.temp_max - 273.15) * 10, 10) / 10;\n      const minTemp = parseInt((response.data.main.temp_min - 273.15) * 10, 10) / 10;\n      console.log(response);\n      console.log(temp);\n      console.log(maxTemp);\n      console.log(minTemp);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main);\n      setTemp(temp);\n      setTemp(maxTemp);\n      setTemp(minTemp);\n  \n      // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n\n  // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n// }, []);\n  \n\n\n  return (\n    <>\n    <div className=\"App\">\n      <br></br>\n      <br></br>\n\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {/* include validation with required or other standard HTML validation rules */}\n        <input {...register(\"exampleRequired\", { required: true })} />\n        {/* errors will return when field validation fails  */}\n        {errors.exampleRequired && <span>This field is required</span>}\n        <input type=\"submit\" />\n        {/* <h1>入力:{city}</h1> */}\n      </form>\n      <h1>City:{statusName}</h1>\n      <h1>Weather:{statusWeather}</h1>\n      <h1>temperature:{temperature}</h1>\n      <h1>temperature:{maxTemperature}</h1>\n      <h1>temperature:{minTemperature}</h1>\n    </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}