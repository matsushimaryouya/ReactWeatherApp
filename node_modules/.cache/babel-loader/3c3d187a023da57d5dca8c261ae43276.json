{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react/weather_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react'; // axiosで通信を行う\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NameForm extends React.Component {\n  // constructorはインスタンス作成時に実行\n  constructor(props) {\n    // propsを呼び出す\n    super(props);\n    this.state = {\n      value: ''\n    }; // .bind(this)で意図したものを指定してしまうのを防ぐ\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value); // htmlがもともと持っているformの送信をなくす\n\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.value,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n} // API通信Getのやり方（axiosを使用）\n\n\nfunction App() {\n  _s();\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo'); // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n\n  React.useEffect(() => {\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl) // thenで成功した場合の処理をかける\n    .then(response => {\n      console.log(response);\n      console.log(response.data.weather[0].main);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main); // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    }); // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(NameForm, {\n        onClick: setCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"City:\", statusName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Weather:\", statusWeather]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"JCQ2xJ0DLNJ4NW5CunIZHFFGsRc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/react/weather_app/src/App.js"],"names":["React","axios","NameForm","Component","constructor","props","state","value","handleChange","bind","handleSubmit","event","setState","target","alert","preventDefault","render","App","statusName","setName","useState","statusWeather","setWeather","city","setCity","useEffect","topUrl","bottomUrl","get","then","response","console","log","data","weather","main","name","catch","err"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n// axiosで通信を行う\nimport axios from 'axios';\n\n\n\nclass NameForm extends React.Component {\n  // constructorはインスタンス作成時に実行\n  constructor(props) {\n    // propsを呼び出す\n    super(props);\n    this.state = {value: ''};\n\n    // .bind(this)で意図したものを指定してしまうのを防ぐ\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    // htmlがもともと持っているformの送信をなくす\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <>\n      {/* 送信したときにhandleSubmit発火 */}\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <h1>{this.state.value}</h1>\n      </>\n    );\n  }\n}\n\n  \n\n// API通信Getのやり方（axiosを使用）\nfunction App() {\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n\n  // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  React.useEffect(() => {\n\n    // axios.get(URL)でapiからgetしてjsonを取得\n    const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n    const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n    axios.get(topUrl + city + bottomUrl)\n    // thenで成功した場合の処理をかける\n    .then(response => {\n      console.log(response);\n      console.log(response.data.weather[0].main);\n      setName(response.data.name);\n      setWeather(response.data.weather[0].main);\n  \n      // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n  // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n}, []);\n  \n  return (\n    <>\n    <div className=\"App\">\n      <br></br>\n      <br></br>\n      <NameForm onClick={setCity}/>\n      <h1>City:{statusName}</h1>\n      <h1>Weather:{statusWeather}</h1>\n    </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}