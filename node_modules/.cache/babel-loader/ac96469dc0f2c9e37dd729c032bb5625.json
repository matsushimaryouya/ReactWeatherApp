{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react/weather_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport GifAnim from './woman_anim.gif';\nimport React from 'react'; // axiosで通信を行う\n// import axios from 'axios';\n\nimport { useForm } from \"react-hook-form\";\nimport ReactPlayer from \"react-player\"; // API通信Getのやり方（axiosを使用）\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n  const [temperature, setTemp] = React.useState();\n  const [maxTemperature, setMaxTemp] = React.useState();\n  const [minTemperature, setMinTemp] = React.useState();\n  const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n  const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6'; // react-hook-form\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => {\n    setCity(data.exampleRequired);\n  }; // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  // React.useEffect(() => {\n  //     // axios.get(URL)でapiからgetしてjsonを取得\n  //     axios.get(topUrl + city + bottomUrl)\n  //     // thenで成功した場合の処理をかける\n  //     .then(response => {\n  //       const temp = parseInt((response.data.main.temp - 273.15) * 10, 10) / 10;\n  //       const maxTemp = parseInt((response.data.main.temp_max - 273.15) * 10, 10) / 10;\n  //       const minTemp = parseInt((response.data.main.temp_min - 273.15) * 10, 10) / 10;\n  //       console.log(response.data.name);\n  //       setName(response.data.name);\n  //       setWeather(response.data.weather[0].main);\n  //       setTemp(temp);\n  //       setMaxTemp(maxTemp);\n  //       setMinTemp(minTemp);\n  //       // catchでエラー時の挙動を定義する\n  //     }).catch(err => {\n  //       console.log('err:', err);\n  //     });\n  //   // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  // });\n\n\n  const myvideo = '../public/rain.mp4';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"humanGif\",\n        src: GifAnim\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        url: myvideo,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weatherNav\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputTxt\",\n            placeholder: \"\\u4F8B)Tokyo, Osaka etc..\",\n            ...register(\"exampleRequired\", {\n              required: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"btn-radius-solid\",\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this), errors.exampleRequired && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u30D5\\u30A9\\u30FC\\u30E0\\u306B\\u5165\\u529B\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"City:\", statusName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Weather:\", statusWeather]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"temp:\", temperature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"MaxTemp:\", maxTemperature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"MinTemp:\", minTemperature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"W3526Rz7vXO/3ohLTBjSlGowieY=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/react/weather_app/src/App.js"],"names":["GifAnim","React","useForm","ReactPlayer","App","statusName","setName","useState","statusWeather","setWeather","city","setCity","temperature","setTemp","maxTemperature","setMaxTemp","minTemperature","setMinTemp","topUrl","bottomUrl","register","handleSubmit","formState","errors","onSubmit","data","exampleRequired","myvideo","required"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CAGA;;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,UAAD,EAAaC,OAAb,IAAwBL,KAAK,CAACM,QAAN,CAAe,SAAf,CAA9B;AACA,QAAM,CAACC,aAAD,EAAgBC,UAAhB,IAA8BR,KAAK,CAACM,QAAN,CAAe,SAAf,CAApC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACM,QAAN,CAAe,OAAf,CAAxB;AACA,QAAM,CAACK,WAAD,EAAcC,OAAd,IAAyBZ,KAAK,CAACM,QAAN,EAA/B;AACA,QAAM,CAACO,cAAD,EAAiBC,UAAjB,IAA+Bd,KAAK,CAACM,QAAN,EAArC;AACA,QAAM,CAACS,cAAD,EAAiBC,UAAjB,IAA+BhB,KAAK,CAACM,QAAN,EAArC;AACA,QAAMW,MAAM,GAAG,oDAAf;AACA,QAAMC,SAAS,GAAG,4CAAlB,CAVa,CAYb;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAArC,MAAoDrB,OAAO,EAAjE;;AACA,QAAMsB,QAAQ,GAAGC,IAAI,IAAI;AACvBd,IAAAA,OAAO,CAACc,IAAI,CAACC,eAAN,CAAP;AACD,GAFD,CAda,CAmBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAMC,OAAO,GAAG,oBAAhB;AAEA,sBACE;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,GAAG,EAAE3B;AAA/B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,GAAG,EAAE2B,OAAlB;AAA2B,QAAA,QAAQ,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAIE;AAAM,UAAA,QAAQ,EAAEN,YAAY,CAACG,QAAD,CAA5B;AAAA,kCAEE;AAAO,YAAA,SAAS,EAAC,UAAjB;AAA4B,YAAA,WAAW,EAAC,2BAAxC;AAAA,eAAmEJ,QAAQ,CAAC,iBAAD,EAAoB;AAAEQ,cAAAA,QAAQ,EAAE;AAAZ,aAApB;AAA3E;AAAA;AAAA;AAAA;AAAA,kBAFF,eAIE;AAAO,YAAA,SAAS,EAAC,kBAAjB;AAAoC,YAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKGL,MAAM,CAACG,eAAP,iBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAYE;AAAA,8BAAUrB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,eAaE;AAAA,iCAAaG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAcE;AAAA,8BAAUI,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,eAeE;AAAA,iCAAaE,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF,eAgBE;AAAA,iCAAaE,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AA6BD;;GA1EQZ,G;UAamDF,O;;;KAbnDE,G;AA4ET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport GifAnim from './woman_anim.gif';\nimport React from 'react';\n// axiosで通信を行う\n// import axios from 'axios';\nimport { useForm } from \"react-hook-form\";\nimport ReactPlayer from \"react-player\";\n\n\n// API通信Getのやり方（axiosを使用）\nfunction App() {\n\n  // apiの情報をstate管理\n  const [statusName, setName] = React.useState('loading');\n  const [statusWeather, setWeather] = React.useState('loading');\n  const [city, setCity] = React.useState('Tokyo');\n  const [temperature, setTemp] = React.useState();\n  const [maxTemperature, setMaxTemp] = React.useState();\n  const [minTemperature, setMinTemp] = React.useState();\n  const topUrl = 'https://api.openweathermap.org/data/2.5/weather?q=';\n  const bottomUrl = ',jp&appid=ab772c4cd38076eff2acf4701e560be6';\n\n  // react-hook-form\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const onSubmit = data => {\n    setCity(data.exampleRequired);\n  }\n\n\n  // React.useEffect(() => { ... }, []);を入れることでaxiosの繰り返し処理を止めることができる\n  // React.useEffect(() => {\n  //     // axios.get(URL)でapiからgetしてjsonを取得\n  //     axios.get(topUrl + city + bottomUrl)\n  //     // thenで成功した場合の処理をかける\n  //     .then(response => {\n  //       const temp = parseInt((response.data.main.temp - 273.15) * 10, 10) / 10;\n  //       const maxTemp = parseInt((response.data.main.temp_max - 273.15) * 10, 10) / 10;\n  //       const minTemp = parseInt((response.data.main.temp_min - 273.15) * 10, 10) / 10;\n  //       console.log(response.data.name);\n  //       setName(response.data.name);\n  //       setWeather(response.data.weather[0].main);\n  //       setTemp(temp);\n  //       setMaxTemp(maxTemp);\n  //       setMinTemp(minTemp);\n    \n  //       // catchでエラー時の挙動を定義する\n  //     }).catch(err => {\n  //       console.log('err:', err);\n  //     });\n  //   // 第二引数に[]を入れるとaxiosの繰り返し処理がなくなる\n  // });\n\n\n  const myvideo = '../public/rain.mp4'\n\n  return (\n    <>\n    <div className=\"App\">\n      <img className=\"humanGif\" src={GifAnim}></img>\n      <ReactPlayer url={myvideo} controls={true} />\n\n\n      <div className=\"weatherNav\">\n        <br></br>\n        <br></br>\n\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {/* include validation with required or other standard HTML validation rules */}\n          <input className=\"inputTxt\" placeholder=\"例)Tokyo, Osaka etc..\" {...register(\"exampleRequired\", { required: true })} />\n          {/* errors will return when field validation fails  */}\n          <input className=\"btn-radius-solid\" type=\"submit\" />\n          {errors.exampleRequired && <p>フォームに入力されていません</p>}\n        </form>\n\n        <h1>City:{statusName}</h1>\n        <h1>Weather:{statusWeather}</h1>\n        <h1>temp:{temperature}</h1>\n        <h1>MaxTemp:{maxTemperature}</h1>\n        <h1>MinTemp:{minTemperature}</h1>\n      </div>\n\n      </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}